package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OffreAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreAllPropertiesEquals(Offre expected, Offre actual) {
        assertOffreAutoGeneratedPropertiesEquals(expected, actual);
        assertOffreAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreAllUpdatablePropertiesEquals(Offre expected, Offre actual) {
        assertOffreUpdatableFieldsEquals(expected, actual);
        assertOffreUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreAutoGeneratedPropertiesEquals(Offre expected, Offre actual) {
        assertThat(actual)
            .as("Verify Offre auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreUpdatableFieldsEquals(Offre expected, Offre actual) {
        assertThat(actual)
            .as("Verify Offre relevant properties")
            .satisfies(a -> assertThat(a.getTitre()).as("check titre").isEqualTo(expected.getTitre()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getEntreprise()).as("check entreprise").isEqualTo(expected.getEntreprise()))
            .satisfies(a -> assertThat(a.getLocalite()).as("check localite").isEqualTo(expected.getLocalite()))
            .satisfies(a -> assertThat(a.getCategorie()).as("check categorie").isEqualTo(expected.getCategorie()))
            .satisfies(a -> assertThat(a.getExperience()).as("check experience").isEqualTo(expected.getExperience()))
            .satisfies(a -> assertThat(a.getExigences()).as("check exigences").isEqualTo(expected.getExigences()))
            .satisfies(a -> assertThat(a.getBenefice()).as("check benefice").isEqualTo(expected.getBenefice()))
            .satisfies(a -> assertThat(a.getDateDePostule()).as("check dateDePostule").isEqualTo(expected.getDateDePostule()))
            .satisfies(a -> assertThat(a.getDateDeFin()).as("check dateDeFin").isEqualTo(expected.getDateDeFin()))
            .satisfies(a -> assertThat(a.getUrgent()).as("check urgent").isEqualTo(expected.getUrgent()))
            .satisfies(a -> assertThat(a.getRemuneration()).as("check remuneration").isEqualTo(expected.getRemuneration()))
            .satisfies(a -> assertThat(a.getContrat()).as("check contrat").isEqualTo(expected.getContrat()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreUpdatableRelationshipsEquals(Offre expected, Offre actual) {
        assertThat(actual)
            .as("Verify Offre relationships")
            .satisfies(a -> assertThat(a.getRecruteur()).as("check recruteur").isEqualTo(expected.getRecruteur()))
            .satisfies(a -> assertThat(a.getPostes()).as("check postes").isEqualTo(expected.getPostes()));
    }
}
