package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UsersAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsersAllPropertiesEquals(Users expected, Users actual) {
        assertUsersAutoGeneratedPropertiesEquals(expected, actual);
        assertUsersAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsersAllUpdatablePropertiesEquals(Users expected, Users actual) {
        assertUsersUpdatableFieldsEquals(expected, actual);
        assertUsersUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsersAutoGeneratedPropertiesEquals(Users expected, Users actual) {
        assertThat(actual)
            .as("Verify Users auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsersUpdatableFieldsEquals(Users expected, Users actual) {
        assertThat(actual)
            .as("Verify Users relevant properties")
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getRole()).as("check role").isEqualTo(expected.getRole()))
            .satisfies(a -> assertThat(a.getTelephone()).as("check telephone").isEqualTo(expected.getTelephone()))
            .satisfies(a -> assertThat(a.getEntreprise()).as("check entreprise").isEqualTo(expected.getEntreprise()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsersUpdatableRelationshipsEquals(Users expected, Users actual) {
        assertThat(actual)
            .as("Verify Users relationships")
            .satisfies(a -> assertThat(a.getVisiteur()).as("check visiteur").isEqualTo(expected.getVisiteur()))
            .satisfies(a -> assertThat(a.getRecruteur()).as("check recruteur").isEqualTo(expected.getRecruteur()));
    }
}
