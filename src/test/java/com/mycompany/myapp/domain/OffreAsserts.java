package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OffreAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreAllPropertiesEquals(Offre expected, Offre actual) {
        assertOffreAutoGeneratedPropertiesEquals(expected, actual);
        assertOffreAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreAllUpdatablePropertiesEquals(Offre expected, Offre actual) {
        assertOffreUpdatableFieldsEquals(expected, actual);
        assertOffreUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreAutoGeneratedPropertiesEquals(Offre expected, Offre actual) {
        assertThat(actual)
            .as("Verify Offre auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreUpdatableFieldsEquals(Offre expected, Offre actual) {
        assertThat(actual)
            .as("Verify Offre relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getCompany()).as("check company").isEqualTo(expected.getCompany()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getSalary()).as("check salary").isEqualTo(expected.getSalary()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getSkills()).as("check skills").isEqualTo(expected.getSkills()))
            .satisfies(a -> assertThat(a.getExperienceLevel()).as("check experienceLevel").isEqualTo(expected.getExperienceLevel()))
            .satisfies(a -> assertThat(a.getPostedDate()).as("check postedDate").isEqualTo(expected.getPostedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOffreUpdatableRelationshipsEquals(Offre expected, Offre actual) {
        assertThat(actual)
            .as("Verify Offre relationships")
            .satisfies(a -> assertThat(a.getRecruteur()).as("check recruteur").isEqualTo(expected.getRecruteur()))
            .satisfies(a -> assertThat(a.getPoste()).as("check poste").isEqualTo(expected.getPoste()));
    }
}
